(ns pbvm-dart.core
  (:require ["package:flutter/material.dart" :as m]
            ["package:flutter/widgets.dart" :as w]
            ["dart:core" :as dc]
            [cljd.flutter.alpha2 :as f]
            [tiltontec.cell.core :refer [cF cF+ cF_ cI]]
            [tiltontec.model.core :refer [mget mset! mswap! fm*] :as md]
            [tiltontec.flutter-mx.core :as fx
             :refer [scaffold app-bar text center as-dart-callback column hero material-app]]
            [tiltontec.flutter-mx.factory :as fct]
            ["package:flutter/foundation.dart" :as foundation]
            ["package:flutter/painting.dart" :as p]))

#_ (defmacro macro-test [name value]
     `(def ~name ~value))

#_ (macro-test reload-test "This text is Centered." #_ "This text is Reloaded.")

#_ (defonce a-me (atom nil))

(defn repl-ish []
  (dc/print :reloading---)
  #_ (if-let [me @a-me]
       (do (await (.delayed dc/Future (dc/Duration .milliseconds 2000)))
           (fct/state-set-all me))
       (dc/print :do-not-yet-have--a-me-instance))
  )

(comment "alpha's widget macro paired down to the bare-minimum (I think).")
(defmacro widget-min
  [& body]
  (let [flutter-build-ctx (vary-meta `ctx# assoc :tag `w/BuildContext)
        state-sym `^w/State state#
        super-sym `super#
        user-widget
        `(reify :extends (w/StatefulWidget.)
           :no-meta true
           (~'createState [_#]
            (reify :extends w/State
              :no-meta true
              (~'initState [~state-sym]
               (.initState ~(vary-meta state-sym assoc :tag 'super))
               nil)
              (^void ~'reassemble [this#]
               (.reassemble ^{:tag ~'super} this#)
               (repl-ish))
              (~'dispose [~state-sym]
               (.dispose ~(vary-meta state-sym assoc :tag 'super)))
              (~'build [~state-sym ~flutter-build-ctx]
               ~@body))))]
    user-widget))






(def reload-test "This text is Centered." #_ "This text is Reloaded.")

(def test-matrix (md/make
                  :test (cI "Matrix" #_ "Matrix Reloaded")))

(comment "Alpha flutter aproach. Works as expected, both for reload-test,
          and making a ui-free matrix and stuffing it in via mget.")
#_
(defn main-app []
  (m/runApp
   (f/widget
    :key "key"
    (m/MaterialApp
     .title "Welcome to Flutter"
     .theme (m/ThemeData .primarySwatch m.Colors/pink)
     .home (m/Scaffold
            .appBar (m/AppBar
                     .title (m/Text (mget test-matrix :test)))
            .body (m/Center
                   .child (m/Text reload-test
                                  .style (m/TextStyle
                                          .color m.Colors/red
                                          .fontSize 32.0))))))))

(comment "Simplified Alpha flutter aproach. Works as expected.")
#_ (defn main-app []
   (m/runApp
    (f/widget
     :key "key"
     (m/MaterialApp
      .home (m/Scaffold
             .body (m/Center
                    .child (m/Text reload-test)))))))

(comment "Pure interop approach. I do not know why this does not work.
         Maybe the same cause behind f/mx not working?")
#_ (defn main-app []
     (m/runApp
      (m/MaterialApp
       .key (foundation/UniqueKey)
       .title "Welcome to Flutter"
       .theme (m/ThemeData .primarySwatch m.Colors/pink)
       .home (m/Scaffold
              .appBar (m/AppBar
                       .title (m/Text (mget test-matrix :test)))
              .body (m/Center
                     .child (m/Text reload-test))))))

(comment "Simplified Alpha nested in f/mx. Works as expected.")
#_ (defn main-app []
   (m/runApp
    (fx/fx-render nil
                  (material-app
                   (f/widget
                    :key "a-key"
                    (m/Scaffold
                     .body (m/Center
                            .child (m/Text reload-test))))))))

(comment "Simplified Alpha nested in f/mx. Does not work with key in f/mx layer! Compare with previous.")
(defn main-app []
  (m/runApp
   (fx/fx-render nil
                 (material-app
                  {:key (foundation/UniqueKey)}
                  (f/widget
                   (m/Scaffold
                    .body (m/Center
                           .child (m/Text reload-test))))))))

(comment "f/mx nested inside of widget-min nested inside of f/mx. Works, not expected!")
(comment "TODO -- try with something other than mx/text")

#_ (defn main-app []
     (m/runApp
      (fx/fx-render nil
                    (material-app
                     {:key (foundation/UniqueKey)}
                     (scaffold
                      (fx/center
                       (fx/column
                        (widget-min (fx/fx-render nil (fx/text reload-test))))))))))

(comment "How far can we go with this approach? Not this far.")
#_ (defn main-app []
   (m/runApp
    (fx/fx-render nil
                  (material-app
                   {:key (foundation/UniqueKey)}
                   (scaffold
                    (fx/fx-render nil
                                  (fx/center
                                   (fx/column
                                    (widget-min (fx/fx-render nil (fx/text reload-test)))
                                    (fx/text reload-test)))))))))

(comment "How far can we go with this approach? Maybe one parent? Nope.")
#_ (defn main-app []
   (m/runApp
    (fx/fx-render nil
                  (material-app
                   {:key (foundation/UniqueKey)}
                   (scaffold
                    (fx/center
                     (fx/fx-render nil (fx/column
                                        (widget-min (fx/fx-render nil (fx/text reload-test)))
                                        (fx/text reload-test)))))))))

(comment "Me trying to manually apply setState after reassemble. No bacon. See repl-ish above.")
#_ (defn main-app []
     (m/runApp
      (fx/fx-render nil
                    (material-app
                     {:key (foundation/UniqueKey)}
                     (scaffold
                      (fx/center
                       (fx/column
                        (fx/text (do (reset! a-me me)
                                     reload-test)))))))))

(comment "Bare-minimum f/mx attempt. No bacon.")
#_ (defn make-app []
     (m/runApp
      (fx/fx-render nil
                    (fx/material-app
                     {:key (foundation/UniqueKey)}
                     (fx/scaffold
                      (fx/text (mget test-matrix :test)))))))

(defn main []
  (main-app))

